# source: https://eu1.prisma.sh/elandamor/pdbeats/dev
# timestamp: Mon Nov 19 2018 09:58:45 GMT+0200 (CAT)

type AggregateAlbum {
  count: Int!
}

type AggregateArtist {
  count: Int!
}

type AggregateImage {
  count: Int!
}

type AggregatePlaylist {
  count: Int!
}

type AggregateTrack {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Album implements Node {
  id: ID!
  alias: String!
  artists(where: ArtistWhereInput, orderBy: ArtistOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Artist!]
  duration: Int!
  genres: [String!]!
  artwork: Image
  name: String!
  numTracks: Int!
  releaseDate: DateTime!
  releaseType: ReleaseType!
  tracks(where: TrackWhereInput, orderBy: TrackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Track!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type AlbumConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AlbumEdge]!
  aggregate: AggregateAlbum!
}

input AlbumCreategenresInput {
  set: [String!]
}

input AlbumCreateInput {
  alias: String!
  duration: Int!
  name: String!
  numTracks: Int!
  releaseDate: DateTime!
  releaseType: ReleaseType!
  genres: AlbumCreategenresInput
  artists: ArtistCreateManyWithoutAlbumsInput
  artwork: ImageCreateOneInput
  tracks: TrackCreateManyWithoutAlbumInput
}

input AlbumCreateManyWithoutArtistsInput {
  create: [AlbumCreateWithoutArtistsInput!]
  connect: [AlbumWhereUniqueInput!]
}

input AlbumCreateOneWithoutTracksInput {
  create: AlbumCreateWithoutTracksInput
  connect: AlbumWhereUniqueInput
}

input AlbumCreateWithoutArtistsInput {
  alias: String!
  duration: Int!
  name: String!
  numTracks: Int!
  releaseDate: DateTime!
  releaseType: ReleaseType!
  genres: AlbumCreategenresInput
  artwork: ImageCreateOneInput
  tracks: TrackCreateManyWithoutAlbumInput
}

input AlbumCreateWithoutTracksInput {
  alias: String!
  duration: Int!
  name: String!
  numTracks: Int!
  releaseDate: DateTime!
  releaseType: ReleaseType!
  genres: AlbumCreategenresInput
  artists: ArtistCreateManyWithoutAlbumsInput
  artwork: ImageCreateOneInput
}

"""An edge in a connection."""
type AlbumEdge {
  """The item at the end of the edge."""
  node: Album!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AlbumOrderByInput {
  id_ASC
  id_DESC
  alias_ASC
  alias_DESC
  duration_ASC
  duration_DESC
  name_ASC
  name_DESC
  numTracks_ASC
  numTracks_DESC
  releaseDate_ASC
  releaseDate_DESC
  releaseType_ASC
  releaseType_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type AlbumPreviousValues {
  id: ID!
  alias: String!
  duration: Int!
  genres: [String!]!
  name: String!
  numTracks: Int!
  releaseDate: DateTime!
  releaseType: ReleaseType!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input AlbumScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [AlbumScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [AlbumScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AlbumScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  alias: String

  """All values that are not equal to given value."""
  alias_not: String

  """All values that are contained in given list."""
  alias_in: [String!]

  """All values that are not contained in given list."""
  alias_not_in: [String!]

  """All values less than the given value."""
  alias_lt: String

  """All values less than or equal the given value."""
  alias_lte: String

  """All values greater than the given value."""
  alias_gt: String

  """All values greater than or equal the given value."""
  alias_gte: String

  """All values containing the given string."""
  alias_contains: String

  """All values not containing the given string."""
  alias_not_contains: String

  """All values starting with the given string."""
  alias_starts_with: String

  """All values not starting with the given string."""
  alias_not_starts_with: String

  """All values ending with the given string."""
  alias_ends_with: String

  """All values not ending with the given string."""
  alias_not_ends_with: String
  duration: Int

  """All values that are not equal to given value."""
  duration_not: Int

  """All values that are contained in given list."""
  duration_in: [Int!]

  """All values that are not contained in given list."""
  duration_not_in: [Int!]

  """All values less than the given value."""
  duration_lt: Int

  """All values less than or equal the given value."""
  duration_lte: Int

  """All values greater than the given value."""
  duration_gt: Int

  """All values greater than or equal the given value."""
  duration_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  numTracks: Int

  """All values that are not equal to given value."""
  numTracks_not: Int

  """All values that are contained in given list."""
  numTracks_in: [Int!]

  """All values that are not contained in given list."""
  numTracks_not_in: [Int!]

  """All values less than the given value."""
  numTracks_lt: Int

  """All values less than or equal the given value."""
  numTracks_lte: Int

  """All values greater than the given value."""
  numTracks_gt: Int

  """All values greater than or equal the given value."""
  numTracks_gte: Int
  releaseDate: DateTime

  """All values that are not equal to given value."""
  releaseDate_not: DateTime

  """All values that are contained in given list."""
  releaseDate_in: [DateTime!]

  """All values that are not contained in given list."""
  releaseDate_not_in: [DateTime!]

  """All values less than the given value."""
  releaseDate_lt: DateTime

  """All values less than or equal the given value."""
  releaseDate_lte: DateTime

  """All values greater than the given value."""
  releaseDate_gt: DateTime

  """All values greater than or equal the given value."""
  releaseDate_gte: DateTime
  releaseType: ReleaseType

  """All values that are not equal to given value."""
  releaseType_not: ReleaseType

  """All values that are contained in given list."""
  releaseType_in: [ReleaseType!]

  """All values that are not contained in given list."""
  releaseType_not_in: [ReleaseType!]
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type AlbumSubscriptionPayload {
  mutation: MutationType!
  node: Album
  updatedFields: [String!]
  previousValues: AlbumPreviousValues
}

input AlbumSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AlbumSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AlbumSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AlbumSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AlbumWhereInput
}

input AlbumUpdategenresInput {
  set: [String!]
}

input AlbumUpdateInput {
  alias: String
  duration: Int
  name: String
  numTracks: Int
  releaseDate: DateTime
  releaseType: ReleaseType
  genres: AlbumUpdategenresInput
  artists: ArtistUpdateManyWithoutAlbumsInput
  artwork: ImageUpdateOneInput
  tracks: TrackUpdateManyWithoutAlbumInput
}

input AlbumUpdateManyDataInput {
  alias: String
  duration: Int
  name: String
  numTracks: Int
  releaseDate: DateTime
  releaseType: ReleaseType
  genres: AlbumUpdategenresInput
}

input AlbumUpdateManyMutationInput {
  alias: String
  duration: Int
  name: String
  numTracks: Int
  releaseDate: DateTime
  releaseType: ReleaseType
  genres: AlbumUpdategenresInput
}

input AlbumUpdateManyWithoutArtistsInput {
  create: [AlbumCreateWithoutArtistsInput!]
  connect: [AlbumWhereUniqueInput!]
  disconnect: [AlbumWhereUniqueInput!]
  delete: [AlbumWhereUniqueInput!]
  update: [AlbumUpdateWithWhereUniqueWithoutArtistsInput!]
  updateMany: [AlbumUpdateManyWithWhereNestedInput!]
  deleteMany: [AlbumScalarWhereInput!]
  upsert: [AlbumUpsertWithWhereUniqueWithoutArtistsInput!]
}

input AlbumUpdateManyWithWhereNestedInput {
  where: AlbumScalarWhereInput!
  data: AlbumUpdateManyDataInput!
}

input AlbumUpdateOneRequiredWithoutTracksInput {
  create: AlbumCreateWithoutTracksInput
  connect: AlbumWhereUniqueInput
  update: AlbumUpdateWithoutTracksDataInput
  upsert: AlbumUpsertWithoutTracksInput
}

input AlbumUpdateWithoutArtistsDataInput {
  alias: String
  duration: Int
  name: String
  numTracks: Int
  releaseDate: DateTime
  releaseType: ReleaseType
  genres: AlbumUpdategenresInput
  artwork: ImageUpdateOneInput
  tracks: TrackUpdateManyWithoutAlbumInput
}

input AlbumUpdateWithoutTracksDataInput {
  alias: String
  duration: Int
  name: String
  numTracks: Int
  releaseDate: DateTime
  releaseType: ReleaseType
  genres: AlbumUpdategenresInput
  artists: ArtistUpdateManyWithoutAlbumsInput
  artwork: ImageUpdateOneInput
}

input AlbumUpdateWithWhereUniqueWithoutArtistsInput {
  where: AlbumWhereUniqueInput!
  data: AlbumUpdateWithoutArtistsDataInput!
}

input AlbumUpsertWithoutTracksInput {
  update: AlbumUpdateWithoutTracksDataInput!
  create: AlbumCreateWithoutTracksInput!
}

input AlbumUpsertWithWhereUniqueWithoutArtistsInput {
  where: AlbumWhereUniqueInput!
  update: AlbumUpdateWithoutArtistsDataInput!
  create: AlbumCreateWithoutArtistsInput!
}

input AlbumWhereInput {
  """Logical AND on all given filters."""
  AND: [AlbumWhereInput!]

  """Logical OR on all given filters."""
  OR: [AlbumWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AlbumWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  alias: String

  """All values that are not equal to given value."""
  alias_not: String

  """All values that are contained in given list."""
  alias_in: [String!]

  """All values that are not contained in given list."""
  alias_not_in: [String!]

  """All values less than the given value."""
  alias_lt: String

  """All values less than or equal the given value."""
  alias_lte: String

  """All values greater than the given value."""
  alias_gt: String

  """All values greater than or equal the given value."""
  alias_gte: String

  """All values containing the given string."""
  alias_contains: String

  """All values not containing the given string."""
  alias_not_contains: String

  """All values starting with the given string."""
  alias_starts_with: String

  """All values not starting with the given string."""
  alias_not_starts_with: String

  """All values ending with the given string."""
  alias_ends_with: String

  """All values not ending with the given string."""
  alias_not_ends_with: String
  duration: Int

  """All values that are not equal to given value."""
  duration_not: Int

  """All values that are contained in given list."""
  duration_in: [Int!]

  """All values that are not contained in given list."""
  duration_not_in: [Int!]

  """All values less than the given value."""
  duration_lt: Int

  """All values less than or equal the given value."""
  duration_lte: Int

  """All values greater than the given value."""
  duration_gt: Int

  """All values greater than or equal the given value."""
  duration_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  numTracks: Int

  """All values that are not equal to given value."""
  numTracks_not: Int

  """All values that are contained in given list."""
  numTracks_in: [Int!]

  """All values that are not contained in given list."""
  numTracks_not_in: [Int!]

  """All values less than the given value."""
  numTracks_lt: Int

  """All values less than or equal the given value."""
  numTracks_lte: Int

  """All values greater than the given value."""
  numTracks_gt: Int

  """All values greater than or equal the given value."""
  numTracks_gte: Int
  releaseDate: DateTime

  """All values that are not equal to given value."""
  releaseDate_not: DateTime

  """All values that are contained in given list."""
  releaseDate_in: [DateTime!]

  """All values that are not contained in given list."""
  releaseDate_not_in: [DateTime!]

  """All values less than the given value."""
  releaseDate_lt: DateTime

  """All values less than or equal the given value."""
  releaseDate_lte: DateTime

  """All values greater than the given value."""
  releaseDate_gt: DateTime

  """All values greater than or equal the given value."""
  releaseDate_gte: DateTime
  releaseType: ReleaseType

  """All values that are not equal to given value."""
  releaseType_not: ReleaseType

  """All values that are contained in given list."""
  releaseType_in: [ReleaseType!]

  """All values that are not contained in given list."""
  releaseType_not_in: [ReleaseType!]
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  artists_every: ArtistWhereInput
  artists_some: ArtistWhereInput
  artists_none: ArtistWhereInput
  artwork: ImageWhereInput
  tracks_every: TrackWhereInput
  tracks_some: TrackWhereInput
  tracks_none: TrackWhereInput
}

input AlbumWhereUniqueInput {
  id: ID
  alias: String
}

type Artist implements Node {
  id: ID!
  albums(where: AlbumWhereInput, orderBy: AlbumOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Album!]
  alias: String!
  avatar: Image
  featuresIn(where: TrackWhereInput, orderBy: TrackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Track!]
  genres: [String!]!
  name: String!
  tracks(where: TrackWhereInput, orderBy: TrackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Track!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ArtistConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ArtistEdge]!
  aggregate: AggregateArtist!
}

input ArtistCreategenresInput {
  set: [String!]
}

input ArtistCreateInput {
  alias: String!
  name: String!
  genres: ArtistCreategenresInput
  albums: AlbumCreateManyWithoutArtistsInput
  avatar: ImageCreateOneInput
  featuresIn: TrackCreateManyWithoutFeaturingInput
  tracks: TrackCreateManyWithoutArtistsInput
}

input ArtistCreateManyWithoutAlbumsInput {
  create: [ArtistCreateWithoutAlbumsInput!]
  connect: [ArtistWhereUniqueInput!]
}

input ArtistCreateManyWithoutFeaturesInInput {
  create: [ArtistCreateWithoutFeaturesInInput!]
  connect: [ArtistWhereUniqueInput!]
}

input ArtistCreateManyWithoutTracksInput {
  create: [ArtistCreateWithoutTracksInput!]
  connect: [ArtistWhereUniqueInput!]
}

input ArtistCreateWithoutAlbumsInput {
  alias: String!
  name: String!
  genres: ArtistCreategenresInput
  avatar: ImageCreateOneInput
  featuresIn: TrackCreateManyWithoutFeaturingInput
  tracks: TrackCreateManyWithoutArtistsInput
}

input ArtistCreateWithoutFeaturesInInput {
  alias: String!
  name: String!
  genres: ArtistCreategenresInput
  albums: AlbumCreateManyWithoutArtistsInput
  avatar: ImageCreateOneInput
  tracks: TrackCreateManyWithoutArtistsInput
}

input ArtistCreateWithoutTracksInput {
  alias: String!
  name: String!
  genres: ArtistCreategenresInput
  albums: AlbumCreateManyWithoutArtistsInput
  avatar: ImageCreateOneInput
  featuresIn: TrackCreateManyWithoutFeaturingInput
}

"""An edge in a connection."""
type ArtistEdge {
  """The item at the end of the edge."""
  node: Artist!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ArtistOrderByInput {
  id_ASC
  id_DESC
  alias_ASC
  alias_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ArtistPreviousValues {
  id: ID!
  alias: String!
  genres: [String!]!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ArtistScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ArtistScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ArtistScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ArtistScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  alias: String

  """All values that are not equal to given value."""
  alias_not: String

  """All values that are contained in given list."""
  alias_in: [String!]

  """All values that are not contained in given list."""
  alias_not_in: [String!]

  """All values less than the given value."""
  alias_lt: String

  """All values less than or equal the given value."""
  alias_lte: String

  """All values greater than the given value."""
  alias_gt: String

  """All values greater than or equal the given value."""
  alias_gte: String

  """All values containing the given string."""
  alias_contains: String

  """All values not containing the given string."""
  alias_not_contains: String

  """All values starting with the given string."""
  alias_starts_with: String

  """All values not starting with the given string."""
  alias_not_starts_with: String

  """All values ending with the given string."""
  alias_ends_with: String

  """All values not ending with the given string."""
  alias_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type ArtistSubscriptionPayload {
  mutation: MutationType!
  node: Artist
  updatedFields: [String!]
  previousValues: ArtistPreviousValues
}

input ArtistSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ArtistSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ArtistSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ArtistSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ArtistWhereInput
}

input ArtistUpdategenresInput {
  set: [String!]
}

input ArtistUpdateInput {
  alias: String
  name: String
  genres: ArtistUpdategenresInput
  albums: AlbumUpdateManyWithoutArtistsInput
  avatar: ImageUpdateOneInput
  featuresIn: TrackUpdateManyWithoutFeaturingInput
  tracks: TrackUpdateManyWithoutArtistsInput
}

input ArtistUpdateManyDataInput {
  alias: String
  name: String
  genres: ArtistUpdategenresInput
}

input ArtistUpdateManyMutationInput {
  alias: String
  name: String
  genres: ArtistUpdategenresInput
}

input ArtistUpdateManyWithoutAlbumsInput {
  create: [ArtistCreateWithoutAlbumsInput!]
  connect: [ArtistWhereUniqueInput!]
  disconnect: [ArtistWhereUniqueInput!]
  delete: [ArtistWhereUniqueInput!]
  update: [ArtistUpdateWithWhereUniqueWithoutAlbumsInput!]
  updateMany: [ArtistUpdateManyWithWhereNestedInput!]
  deleteMany: [ArtistScalarWhereInput!]
  upsert: [ArtistUpsertWithWhereUniqueWithoutAlbumsInput!]
}

input ArtistUpdateManyWithoutFeaturesInInput {
  create: [ArtistCreateWithoutFeaturesInInput!]
  connect: [ArtistWhereUniqueInput!]
  disconnect: [ArtistWhereUniqueInput!]
  delete: [ArtistWhereUniqueInput!]
  update: [ArtistUpdateWithWhereUniqueWithoutFeaturesInInput!]
  updateMany: [ArtistUpdateManyWithWhereNestedInput!]
  deleteMany: [ArtistScalarWhereInput!]
  upsert: [ArtistUpsertWithWhereUniqueWithoutFeaturesInInput!]
}

input ArtistUpdateManyWithoutTracksInput {
  create: [ArtistCreateWithoutTracksInput!]
  connect: [ArtistWhereUniqueInput!]
  disconnect: [ArtistWhereUniqueInput!]
  delete: [ArtistWhereUniqueInput!]
  update: [ArtistUpdateWithWhereUniqueWithoutTracksInput!]
  updateMany: [ArtistUpdateManyWithWhereNestedInput!]
  deleteMany: [ArtistScalarWhereInput!]
  upsert: [ArtistUpsertWithWhereUniqueWithoutTracksInput!]
}

input ArtistUpdateManyWithWhereNestedInput {
  where: ArtistScalarWhereInput!
  data: ArtistUpdateManyDataInput!
}

input ArtistUpdateWithoutAlbumsDataInput {
  alias: String
  name: String
  genres: ArtistUpdategenresInput
  avatar: ImageUpdateOneInput
  featuresIn: TrackUpdateManyWithoutFeaturingInput
  tracks: TrackUpdateManyWithoutArtistsInput
}

input ArtistUpdateWithoutFeaturesInDataInput {
  alias: String
  name: String
  genres: ArtistUpdategenresInput
  albums: AlbumUpdateManyWithoutArtistsInput
  avatar: ImageUpdateOneInput
  tracks: TrackUpdateManyWithoutArtistsInput
}

input ArtistUpdateWithoutTracksDataInput {
  alias: String
  name: String
  genres: ArtistUpdategenresInput
  albums: AlbumUpdateManyWithoutArtistsInput
  avatar: ImageUpdateOneInput
  featuresIn: TrackUpdateManyWithoutFeaturingInput
}

input ArtistUpdateWithWhereUniqueWithoutAlbumsInput {
  where: ArtistWhereUniqueInput!
  data: ArtistUpdateWithoutAlbumsDataInput!
}

input ArtistUpdateWithWhereUniqueWithoutFeaturesInInput {
  where: ArtistWhereUniqueInput!
  data: ArtistUpdateWithoutFeaturesInDataInput!
}

input ArtistUpdateWithWhereUniqueWithoutTracksInput {
  where: ArtistWhereUniqueInput!
  data: ArtistUpdateWithoutTracksDataInput!
}

input ArtistUpsertWithWhereUniqueWithoutAlbumsInput {
  where: ArtistWhereUniqueInput!
  update: ArtistUpdateWithoutAlbumsDataInput!
  create: ArtistCreateWithoutAlbumsInput!
}

input ArtistUpsertWithWhereUniqueWithoutFeaturesInInput {
  where: ArtistWhereUniqueInput!
  update: ArtistUpdateWithoutFeaturesInDataInput!
  create: ArtistCreateWithoutFeaturesInInput!
}

input ArtistUpsertWithWhereUniqueWithoutTracksInput {
  where: ArtistWhereUniqueInput!
  update: ArtistUpdateWithoutTracksDataInput!
  create: ArtistCreateWithoutTracksInput!
}

input ArtistWhereInput {
  """Logical AND on all given filters."""
  AND: [ArtistWhereInput!]

  """Logical OR on all given filters."""
  OR: [ArtistWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ArtistWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  alias: String

  """All values that are not equal to given value."""
  alias_not: String

  """All values that are contained in given list."""
  alias_in: [String!]

  """All values that are not contained in given list."""
  alias_not_in: [String!]

  """All values less than the given value."""
  alias_lt: String

  """All values less than or equal the given value."""
  alias_lte: String

  """All values greater than the given value."""
  alias_gt: String

  """All values greater than or equal the given value."""
  alias_gte: String

  """All values containing the given string."""
  alias_contains: String

  """All values not containing the given string."""
  alias_not_contains: String

  """All values starting with the given string."""
  alias_starts_with: String

  """All values not starting with the given string."""
  alias_not_starts_with: String

  """All values ending with the given string."""
  alias_ends_with: String

  """All values not ending with the given string."""
  alias_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  albums_every: AlbumWhereInput
  albums_some: AlbumWhereInput
  albums_none: AlbumWhereInput
  avatar: ImageWhereInput
  featuresIn_every: TrackWhereInput
  featuresIn_some: TrackWhereInput
  featuresIn_none: TrackWhereInput
  tracks_every: TrackWhereInput
  tracks_some: TrackWhereInput
  tracks_none: TrackWhereInput
}

input ArtistWhereUniqueInput {
  id: ID
  alias: String
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

type Image implements Node {
  id: ID!
  uploadedBy: User!
  url: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ImageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ImageEdge]!
  aggregate: AggregateImage!
}

input ImageCreateInput {
  url: String!
  uploadedBy: UserCreateOneInput!
}

input ImageCreateManyInput {
  create: [ImageCreateInput!]
  connect: [ImageWhereUniqueInput!]
}

input ImageCreateOneInput {
  create: ImageCreateInput
  connect: ImageWhereUniqueInput
}

"""An edge in a connection."""
type ImageEdge {
  """The item at the end of the edge."""
  node: Image!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ImageOrderByInput {
  id_ASC
  id_DESC
  url_ASC
  url_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ImagePreviousValues {
  id: ID!
  url: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ImageScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ImageScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ImageScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ImageScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type ImageSubscriptionPayload {
  mutation: MutationType!
  node: Image
  updatedFields: [String!]
  previousValues: ImagePreviousValues
}

input ImageSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ImageSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ImageSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ImageSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ImageWhereInput
}

input ImageUpdateDataInput {
  url: String
  uploadedBy: UserUpdateOneRequiredInput
}

input ImageUpdateInput {
  url: String
  uploadedBy: UserUpdateOneRequiredInput
}

input ImageUpdateManyDataInput {
  url: String
}

input ImageUpdateManyInput {
  create: [ImageCreateInput!]
  connect: [ImageWhereUniqueInput!]
  disconnect: [ImageWhereUniqueInput!]
  delete: [ImageWhereUniqueInput!]
  update: [ImageUpdateWithWhereUniqueNestedInput!]
  updateMany: [ImageUpdateManyWithWhereNestedInput!]
  deleteMany: [ImageScalarWhereInput!]
  upsert: [ImageUpsertWithWhereUniqueNestedInput!]
}

input ImageUpdateManyMutationInput {
  url: String
}

input ImageUpdateManyWithWhereNestedInput {
  where: ImageScalarWhereInput!
  data: ImageUpdateManyDataInput!
}

input ImageUpdateOneInput {
  create: ImageCreateInput
  connect: ImageWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ImageUpdateDataInput
  upsert: ImageUpsertNestedInput
}

input ImageUpdateWithWhereUniqueNestedInput {
  where: ImageWhereUniqueInput!
  data: ImageUpdateDataInput!
}

input ImageUpsertNestedInput {
  update: ImageUpdateDataInput!
  create: ImageCreateInput!
}

input ImageUpsertWithWhereUniqueNestedInput {
  where: ImageWhereUniqueInput!
  update: ImageUpdateDataInput!
  create: ImageCreateInput!
}

input ImageWhereInput {
  """Logical AND on all given filters."""
  AND: [ImageWhereInput!]

  """Logical OR on all given filters."""
  OR: [ImageWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ImageWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  uploadedBy: UserWhereInput
}

input ImageWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createArtist(data: ArtistCreateInput!): Artist!
  createTrack(data: TrackCreateInput!): Track!
  createAlbum(data: AlbumCreateInput!): Album!
  createPlaylist(data: PlaylistCreateInput!): Playlist!
  createUser(data: UserCreateInput!): User!
  createImage(data: ImageCreateInput!): Image!
  updateArtist(data: ArtistUpdateInput!, where: ArtistWhereUniqueInput!): Artist
  updateTrack(data: TrackUpdateInput!, where: TrackWhereUniqueInput!): Track
  updateAlbum(data: AlbumUpdateInput!, where: AlbumWhereUniqueInput!): Album
  updatePlaylist(data: PlaylistUpdateInput!, where: PlaylistWhereUniqueInput!): Playlist
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateImage(data: ImageUpdateInput!, where: ImageWhereUniqueInput!): Image
  deleteArtist(where: ArtistWhereUniqueInput!): Artist
  deleteTrack(where: TrackWhereUniqueInput!): Track
  deleteAlbum(where: AlbumWhereUniqueInput!): Album
  deletePlaylist(where: PlaylistWhereUniqueInput!): Playlist
  deleteUser(where: UserWhereUniqueInput!): User
  deleteImage(where: ImageWhereUniqueInput!): Image
  upsertArtist(where: ArtistWhereUniqueInput!, create: ArtistCreateInput!, update: ArtistUpdateInput!): Artist!
  upsertTrack(where: TrackWhereUniqueInput!, create: TrackCreateInput!, update: TrackUpdateInput!): Track!
  upsertAlbum(where: AlbumWhereUniqueInput!, create: AlbumCreateInput!, update: AlbumUpdateInput!): Album!
  upsertPlaylist(where: PlaylistWhereUniqueInput!, create: PlaylistCreateInput!, update: PlaylistUpdateInput!): Playlist!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertImage(where: ImageWhereUniqueInput!, create: ImageCreateInput!, update: ImageUpdateInput!): Image!
  updateManyArtists(data: ArtistUpdateManyMutationInput!, where: ArtistWhereInput): BatchPayload!
  updateManyTracks(data: TrackUpdateManyMutationInput!, where: TrackWhereInput): BatchPayload!
  updateManyAlbums(data: AlbumUpdateManyMutationInput!, where: AlbumWhereInput): BatchPayload!
  updateManyPlaylists(data: PlaylistUpdateManyMutationInput!, where: PlaylistWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyImages(data: ImageUpdateManyMutationInput!, where: ImageWhereInput): BatchPayload!
  deleteManyArtists(where: ArtistWhereInput): BatchPayload!
  deleteManyTracks(where: TrackWhereInput): BatchPayload!
  deleteManyAlbums(where: AlbumWhereInput): BatchPayload!
  deleteManyPlaylists(where: PlaylistWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyImages(where: ImageWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Playlist implements Node {
  id: ID!
  alias: String!
  artwork(where: ImageWhereInput, orderBy: ImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Image!]
  collaborative: Boolean!
  creator: User!
  description: String
  duration: Int!
  name: String!
  numTracks: Int!
  privacy: Privacy!
  tracks(where: TrackWhereInput, orderBy: TrackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Track!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type PlaylistConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PlaylistEdge]!
  aggregate: AggregatePlaylist!
}

input PlaylistCreateInput {
  alias: String!
  collaborative: Boolean
  description: String
  duration: Int!
  name: String!
  numTracks: Int!
  privacy: Privacy
  artwork: ImageCreateManyInput
  creator: UserCreateOneWithoutPlaylistsInput!
  tracks: TrackCreateManyWithoutInPlaylistInput
}

input PlaylistCreateManyWithoutCreatorInput {
  create: [PlaylistCreateWithoutCreatorInput!]
  connect: [PlaylistWhereUniqueInput!]
}

input PlaylistCreateManyWithoutTracksInput {
  create: [PlaylistCreateWithoutTracksInput!]
  connect: [PlaylistWhereUniqueInput!]
}

input PlaylistCreateWithoutCreatorInput {
  alias: String!
  collaborative: Boolean
  description: String
  duration: Int!
  name: String!
  numTracks: Int!
  privacy: Privacy
  artwork: ImageCreateManyInput
  tracks: TrackCreateManyWithoutInPlaylistInput
}

input PlaylistCreateWithoutTracksInput {
  alias: String!
  collaborative: Boolean
  description: String
  duration: Int!
  name: String!
  numTracks: Int!
  privacy: Privacy
  artwork: ImageCreateManyInput
  creator: UserCreateOneWithoutPlaylistsInput!
}

"""An edge in a connection."""
type PlaylistEdge {
  """The item at the end of the edge."""
  node: Playlist!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PlaylistOrderByInput {
  id_ASC
  id_DESC
  alias_ASC
  alias_DESC
  collaborative_ASC
  collaborative_DESC
  description_ASC
  description_DESC
  duration_ASC
  duration_DESC
  name_ASC
  name_DESC
  numTracks_ASC
  numTracks_DESC
  privacy_ASC
  privacy_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PlaylistPreviousValues {
  id: ID!
  alias: String!
  collaborative: Boolean!
  description: String
  duration: Int!
  name: String!
  numTracks: Int!
  privacy: Privacy!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PlaylistScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [PlaylistScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [PlaylistScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PlaylistScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  alias: String

  """All values that are not equal to given value."""
  alias_not: String

  """All values that are contained in given list."""
  alias_in: [String!]

  """All values that are not contained in given list."""
  alias_not_in: [String!]

  """All values less than the given value."""
  alias_lt: String

  """All values less than or equal the given value."""
  alias_lte: String

  """All values greater than the given value."""
  alias_gt: String

  """All values greater than or equal the given value."""
  alias_gte: String

  """All values containing the given string."""
  alias_contains: String

  """All values not containing the given string."""
  alias_not_contains: String

  """All values starting with the given string."""
  alias_starts_with: String

  """All values not starting with the given string."""
  alias_not_starts_with: String

  """All values ending with the given string."""
  alias_ends_with: String

  """All values not ending with the given string."""
  alias_not_ends_with: String
  collaborative: Boolean

  """All values that are not equal to given value."""
  collaborative_not: Boolean
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  duration: Int

  """All values that are not equal to given value."""
  duration_not: Int

  """All values that are contained in given list."""
  duration_in: [Int!]

  """All values that are not contained in given list."""
  duration_not_in: [Int!]

  """All values less than the given value."""
  duration_lt: Int

  """All values less than or equal the given value."""
  duration_lte: Int

  """All values greater than the given value."""
  duration_gt: Int

  """All values greater than or equal the given value."""
  duration_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  numTracks: Int

  """All values that are not equal to given value."""
  numTracks_not: Int

  """All values that are contained in given list."""
  numTracks_in: [Int!]

  """All values that are not contained in given list."""
  numTracks_not_in: [Int!]

  """All values less than the given value."""
  numTracks_lt: Int

  """All values less than or equal the given value."""
  numTracks_lte: Int

  """All values greater than the given value."""
  numTracks_gt: Int

  """All values greater than or equal the given value."""
  numTracks_gte: Int
  privacy: Privacy

  """All values that are not equal to given value."""
  privacy_not: Privacy

  """All values that are contained in given list."""
  privacy_in: [Privacy!]

  """All values that are not contained in given list."""
  privacy_not_in: [Privacy!]
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type PlaylistSubscriptionPayload {
  mutation: MutationType!
  node: Playlist
  updatedFields: [String!]
  previousValues: PlaylistPreviousValues
}

input PlaylistSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PlaylistSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PlaylistSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PlaylistSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PlaylistWhereInput
}

input PlaylistUpdateInput {
  alias: String
  collaborative: Boolean
  description: String
  duration: Int
  name: String
  numTracks: Int
  privacy: Privacy
  artwork: ImageUpdateManyInput
  creator: UserUpdateOneRequiredWithoutPlaylistsInput
  tracks: TrackUpdateManyWithoutInPlaylistInput
}

input PlaylistUpdateManyDataInput {
  alias: String
  collaborative: Boolean
  description: String
  duration: Int
  name: String
  numTracks: Int
  privacy: Privacy
}

input PlaylistUpdateManyMutationInput {
  alias: String
  collaborative: Boolean
  description: String
  duration: Int
  name: String
  numTracks: Int
  privacy: Privacy
}

input PlaylistUpdateManyWithoutCreatorInput {
  create: [PlaylistCreateWithoutCreatorInput!]
  connect: [PlaylistWhereUniqueInput!]
  disconnect: [PlaylistWhereUniqueInput!]
  delete: [PlaylistWhereUniqueInput!]
  update: [PlaylistUpdateWithWhereUniqueWithoutCreatorInput!]
  updateMany: [PlaylistUpdateManyWithWhereNestedInput!]
  deleteMany: [PlaylistScalarWhereInput!]
  upsert: [PlaylistUpsertWithWhereUniqueWithoutCreatorInput!]
}

input PlaylistUpdateManyWithoutTracksInput {
  create: [PlaylistCreateWithoutTracksInput!]
  connect: [PlaylistWhereUniqueInput!]
  disconnect: [PlaylistWhereUniqueInput!]
  delete: [PlaylistWhereUniqueInput!]
  update: [PlaylistUpdateWithWhereUniqueWithoutTracksInput!]
  updateMany: [PlaylistUpdateManyWithWhereNestedInput!]
  deleteMany: [PlaylistScalarWhereInput!]
  upsert: [PlaylistUpsertWithWhereUniqueWithoutTracksInput!]
}

input PlaylistUpdateManyWithWhereNestedInput {
  where: PlaylistScalarWhereInput!
  data: PlaylistUpdateManyDataInput!
}

input PlaylistUpdateWithoutCreatorDataInput {
  alias: String
  collaborative: Boolean
  description: String
  duration: Int
  name: String
  numTracks: Int
  privacy: Privacy
  artwork: ImageUpdateManyInput
  tracks: TrackUpdateManyWithoutInPlaylistInput
}

input PlaylistUpdateWithoutTracksDataInput {
  alias: String
  collaborative: Boolean
  description: String
  duration: Int
  name: String
  numTracks: Int
  privacy: Privacy
  artwork: ImageUpdateManyInput
  creator: UserUpdateOneRequiredWithoutPlaylistsInput
}

input PlaylistUpdateWithWhereUniqueWithoutCreatorInput {
  where: PlaylistWhereUniqueInput!
  data: PlaylistUpdateWithoutCreatorDataInput!
}

input PlaylistUpdateWithWhereUniqueWithoutTracksInput {
  where: PlaylistWhereUniqueInput!
  data: PlaylistUpdateWithoutTracksDataInput!
}

input PlaylistUpsertWithWhereUniqueWithoutCreatorInput {
  where: PlaylistWhereUniqueInput!
  update: PlaylistUpdateWithoutCreatorDataInput!
  create: PlaylistCreateWithoutCreatorInput!
}

input PlaylistUpsertWithWhereUniqueWithoutTracksInput {
  where: PlaylistWhereUniqueInput!
  update: PlaylistUpdateWithoutTracksDataInput!
  create: PlaylistCreateWithoutTracksInput!
}

input PlaylistWhereInput {
  """Logical AND on all given filters."""
  AND: [PlaylistWhereInput!]

  """Logical OR on all given filters."""
  OR: [PlaylistWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PlaylistWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  alias: String

  """All values that are not equal to given value."""
  alias_not: String

  """All values that are contained in given list."""
  alias_in: [String!]

  """All values that are not contained in given list."""
  alias_not_in: [String!]

  """All values less than the given value."""
  alias_lt: String

  """All values less than or equal the given value."""
  alias_lte: String

  """All values greater than the given value."""
  alias_gt: String

  """All values greater than or equal the given value."""
  alias_gte: String

  """All values containing the given string."""
  alias_contains: String

  """All values not containing the given string."""
  alias_not_contains: String

  """All values starting with the given string."""
  alias_starts_with: String

  """All values not starting with the given string."""
  alias_not_starts_with: String

  """All values ending with the given string."""
  alias_ends_with: String

  """All values not ending with the given string."""
  alias_not_ends_with: String
  collaborative: Boolean

  """All values that are not equal to given value."""
  collaborative_not: Boolean
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  duration: Int

  """All values that are not equal to given value."""
  duration_not: Int

  """All values that are contained in given list."""
  duration_in: [Int!]

  """All values that are not contained in given list."""
  duration_not_in: [Int!]

  """All values less than the given value."""
  duration_lt: Int

  """All values less than or equal the given value."""
  duration_lte: Int

  """All values greater than the given value."""
  duration_gt: Int

  """All values greater than or equal the given value."""
  duration_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  numTracks: Int

  """All values that are not equal to given value."""
  numTracks_not: Int

  """All values that are contained in given list."""
  numTracks_in: [Int!]

  """All values that are not contained in given list."""
  numTracks_not_in: [Int!]

  """All values less than the given value."""
  numTracks_lt: Int

  """All values less than or equal the given value."""
  numTracks_lte: Int

  """All values greater than the given value."""
  numTracks_gt: Int

  """All values greater than or equal the given value."""
  numTracks_gte: Int
  privacy: Privacy

  """All values that are not equal to given value."""
  privacy_not: Privacy

  """All values that are contained in given list."""
  privacy_in: [Privacy!]

  """All values that are not contained in given list."""
  privacy_not_in: [Privacy!]
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  artwork_every: ImageWhereInput
  artwork_some: ImageWhereInput
  artwork_none: ImageWhereInput
  creator: UserWhereInput
  tracks_every: TrackWhereInput
  tracks_some: TrackWhereInput
  tracks_none: TrackWhereInput
}

input PlaylistWhereUniqueInput {
  id: ID
  alias: String
}

enum Privacy {
  PRIVATE
  PUBLIC
  UNLISTED
}

type Query {
  artists(where: ArtistWhereInput, orderBy: ArtistOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Artist]!
  tracks(where: TrackWhereInput, orderBy: TrackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Track]!
  albums(where: AlbumWhereInput, orderBy: AlbumOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Album]!
  playlists(where: PlaylistWhereInput, orderBy: PlaylistOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Playlist]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  images(where: ImageWhereInput, orderBy: ImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Image]!
  artist(where: ArtistWhereUniqueInput!): Artist
  track(where: TrackWhereUniqueInput!): Track
  album(where: AlbumWhereUniqueInput!): Album
  playlist(where: PlaylistWhereUniqueInput!): Playlist
  user(where: UserWhereUniqueInput!): User
  image(where: ImageWhereUniqueInput!): Image
  artistsConnection(where: ArtistWhereInput, orderBy: ArtistOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ArtistConnection!
  tracksConnection(where: TrackWhereInput, orderBy: TrackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TrackConnection!
  albumsConnection(where: AlbumWhereInput, orderBy: AlbumOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AlbumConnection!
  playlistsConnection(where: PlaylistWhereInput, orderBy: PlaylistOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PlaylistConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  imagesConnection(where: ImageWhereInput, orderBy: ImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ImageConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

enum ReleaseType {
  ALBUM
  EP
  LP
  PODCAST
  SINGLE
}

type Subscription {
  artist(where: ArtistSubscriptionWhereInput): ArtistSubscriptionPayload
  track(where: TrackSubscriptionWhereInput): TrackSubscriptionPayload
  album(where: AlbumSubscriptionWhereInput): AlbumSubscriptionPayload
  playlist(where: PlaylistSubscriptionWhereInput): PlaylistSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  image(where: ImageSubscriptionWhereInput): ImageSubscriptionPayload
}

type Track implements Node {
  id: ID!
  album: Album!
  artists(where: ArtistWhereInput, orderBy: ArtistOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Artist!]
  discNumber: Int
  duration: Int!
  explicit: Boolean!
  featuring(where: ArtistWhereInput, orderBy: ArtistOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Artist!]
  genre: String!
  inPlaylist(where: PlaylistWhereInput, orderBy: PlaylistOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Playlist!]
  isPlayable: Boolean!
  name: String!
  trackNumber: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type TrackConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TrackEdge]!
  aggregate: AggregateTrack!
}

input TrackCreateInput {
  discNumber: Int
  duration: Int!
  explicit: Boolean
  genre: String
  isPlayable: Boolean
  name: String!
  trackNumber: Int!
  album: AlbumCreateOneWithoutTracksInput!
  artists: ArtistCreateManyWithoutTracksInput
  featuring: ArtistCreateManyWithoutFeaturesInInput
  inPlaylist: PlaylistCreateManyWithoutTracksInput
}

input TrackCreateManyWithoutAlbumInput {
  create: [TrackCreateWithoutAlbumInput!]
  connect: [TrackWhereUniqueInput!]
}

input TrackCreateManyWithoutArtistsInput {
  create: [TrackCreateWithoutArtistsInput!]
  connect: [TrackWhereUniqueInput!]
}

input TrackCreateManyWithoutFeaturingInput {
  create: [TrackCreateWithoutFeaturingInput!]
  connect: [TrackWhereUniqueInput!]
}

input TrackCreateManyWithoutInPlaylistInput {
  create: [TrackCreateWithoutInPlaylistInput!]
  connect: [TrackWhereUniqueInput!]
}

input TrackCreateWithoutAlbumInput {
  discNumber: Int
  duration: Int!
  explicit: Boolean
  genre: String
  isPlayable: Boolean
  name: String!
  trackNumber: Int!
  artists: ArtistCreateManyWithoutTracksInput
  featuring: ArtistCreateManyWithoutFeaturesInInput
  inPlaylist: PlaylistCreateManyWithoutTracksInput
}

input TrackCreateWithoutArtistsInput {
  discNumber: Int
  duration: Int!
  explicit: Boolean
  genre: String
  isPlayable: Boolean
  name: String!
  trackNumber: Int!
  album: AlbumCreateOneWithoutTracksInput!
  featuring: ArtistCreateManyWithoutFeaturesInInput
  inPlaylist: PlaylistCreateManyWithoutTracksInput
}

input TrackCreateWithoutFeaturingInput {
  discNumber: Int
  duration: Int!
  explicit: Boolean
  genre: String
  isPlayable: Boolean
  name: String!
  trackNumber: Int!
  album: AlbumCreateOneWithoutTracksInput!
  artists: ArtistCreateManyWithoutTracksInput
  inPlaylist: PlaylistCreateManyWithoutTracksInput
}

input TrackCreateWithoutInPlaylistInput {
  discNumber: Int
  duration: Int!
  explicit: Boolean
  genre: String
  isPlayable: Boolean
  name: String!
  trackNumber: Int!
  album: AlbumCreateOneWithoutTracksInput!
  artists: ArtistCreateManyWithoutTracksInput
  featuring: ArtistCreateManyWithoutFeaturesInInput
}

"""An edge in a connection."""
type TrackEdge {
  """The item at the end of the edge."""
  node: Track!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TrackOrderByInput {
  id_ASC
  id_DESC
  discNumber_ASC
  discNumber_DESC
  duration_ASC
  duration_DESC
  explicit_ASC
  explicit_DESC
  genre_ASC
  genre_DESC
  isPlayable_ASC
  isPlayable_DESC
  name_ASC
  name_DESC
  trackNumber_ASC
  trackNumber_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TrackPreviousValues {
  id: ID!
  discNumber: Int
  duration: Int!
  explicit: Boolean!
  genre: String!
  isPlayable: Boolean!
  name: String!
  trackNumber: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input TrackScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [TrackScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [TrackScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TrackScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  discNumber: Int

  """All values that are not equal to given value."""
  discNumber_not: Int

  """All values that are contained in given list."""
  discNumber_in: [Int!]

  """All values that are not contained in given list."""
  discNumber_not_in: [Int!]

  """All values less than the given value."""
  discNumber_lt: Int

  """All values less than or equal the given value."""
  discNumber_lte: Int

  """All values greater than the given value."""
  discNumber_gt: Int

  """All values greater than or equal the given value."""
  discNumber_gte: Int
  duration: Int

  """All values that are not equal to given value."""
  duration_not: Int

  """All values that are contained in given list."""
  duration_in: [Int!]

  """All values that are not contained in given list."""
  duration_not_in: [Int!]

  """All values less than the given value."""
  duration_lt: Int

  """All values less than or equal the given value."""
  duration_lte: Int

  """All values greater than the given value."""
  duration_gt: Int

  """All values greater than or equal the given value."""
  duration_gte: Int
  explicit: Boolean

  """All values that are not equal to given value."""
  explicit_not: Boolean
  genre: String

  """All values that are not equal to given value."""
  genre_not: String

  """All values that are contained in given list."""
  genre_in: [String!]

  """All values that are not contained in given list."""
  genre_not_in: [String!]

  """All values less than the given value."""
  genre_lt: String

  """All values less than or equal the given value."""
  genre_lte: String

  """All values greater than the given value."""
  genre_gt: String

  """All values greater than or equal the given value."""
  genre_gte: String

  """All values containing the given string."""
  genre_contains: String

  """All values not containing the given string."""
  genre_not_contains: String

  """All values starting with the given string."""
  genre_starts_with: String

  """All values not starting with the given string."""
  genre_not_starts_with: String

  """All values ending with the given string."""
  genre_ends_with: String

  """All values not ending with the given string."""
  genre_not_ends_with: String
  isPlayable: Boolean

  """All values that are not equal to given value."""
  isPlayable_not: Boolean
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  trackNumber: Int

  """All values that are not equal to given value."""
  trackNumber_not: Int

  """All values that are contained in given list."""
  trackNumber_in: [Int!]

  """All values that are not contained in given list."""
  trackNumber_not_in: [Int!]

  """All values less than the given value."""
  trackNumber_lt: Int

  """All values less than or equal the given value."""
  trackNumber_lte: Int

  """All values greater than the given value."""
  trackNumber_gt: Int

  """All values greater than or equal the given value."""
  trackNumber_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type TrackSubscriptionPayload {
  mutation: MutationType!
  node: Track
  updatedFields: [String!]
  previousValues: TrackPreviousValues
}

input TrackSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TrackSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TrackSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TrackSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TrackWhereInput
}

input TrackUpdateInput {
  discNumber: Int
  duration: Int
  explicit: Boolean
  genre: String
  isPlayable: Boolean
  name: String
  trackNumber: Int
  album: AlbumUpdateOneRequiredWithoutTracksInput
  artists: ArtistUpdateManyWithoutTracksInput
  featuring: ArtistUpdateManyWithoutFeaturesInInput
  inPlaylist: PlaylistUpdateManyWithoutTracksInput
}

input TrackUpdateManyDataInput {
  discNumber: Int
  duration: Int
  explicit: Boolean
  genre: String
  isPlayable: Boolean
  name: String
  trackNumber: Int
}

input TrackUpdateManyMutationInput {
  discNumber: Int
  duration: Int
  explicit: Boolean
  genre: String
  isPlayable: Boolean
  name: String
  trackNumber: Int
}

input TrackUpdateManyWithoutAlbumInput {
  create: [TrackCreateWithoutAlbumInput!]
  connect: [TrackWhereUniqueInput!]
  disconnect: [TrackWhereUniqueInput!]
  delete: [TrackWhereUniqueInput!]
  update: [TrackUpdateWithWhereUniqueWithoutAlbumInput!]
  updateMany: [TrackUpdateManyWithWhereNestedInput!]
  deleteMany: [TrackScalarWhereInput!]
  upsert: [TrackUpsertWithWhereUniqueWithoutAlbumInput!]
}

input TrackUpdateManyWithoutArtistsInput {
  create: [TrackCreateWithoutArtistsInput!]
  connect: [TrackWhereUniqueInput!]
  disconnect: [TrackWhereUniqueInput!]
  delete: [TrackWhereUniqueInput!]
  update: [TrackUpdateWithWhereUniqueWithoutArtistsInput!]
  updateMany: [TrackUpdateManyWithWhereNestedInput!]
  deleteMany: [TrackScalarWhereInput!]
  upsert: [TrackUpsertWithWhereUniqueWithoutArtistsInput!]
}

input TrackUpdateManyWithoutFeaturingInput {
  create: [TrackCreateWithoutFeaturingInput!]
  connect: [TrackWhereUniqueInput!]
  disconnect: [TrackWhereUniqueInput!]
  delete: [TrackWhereUniqueInput!]
  update: [TrackUpdateWithWhereUniqueWithoutFeaturingInput!]
  updateMany: [TrackUpdateManyWithWhereNestedInput!]
  deleteMany: [TrackScalarWhereInput!]
  upsert: [TrackUpsertWithWhereUniqueWithoutFeaturingInput!]
}

input TrackUpdateManyWithoutInPlaylistInput {
  create: [TrackCreateWithoutInPlaylistInput!]
  connect: [TrackWhereUniqueInput!]
  disconnect: [TrackWhereUniqueInput!]
  delete: [TrackWhereUniqueInput!]
  update: [TrackUpdateWithWhereUniqueWithoutInPlaylistInput!]
  updateMany: [TrackUpdateManyWithWhereNestedInput!]
  deleteMany: [TrackScalarWhereInput!]
  upsert: [TrackUpsertWithWhereUniqueWithoutInPlaylistInput!]
}

input TrackUpdateManyWithWhereNestedInput {
  where: TrackScalarWhereInput!
  data: TrackUpdateManyDataInput!
}

input TrackUpdateWithoutAlbumDataInput {
  discNumber: Int
  duration: Int
  explicit: Boolean
  genre: String
  isPlayable: Boolean
  name: String
  trackNumber: Int
  artists: ArtistUpdateManyWithoutTracksInput
  featuring: ArtistUpdateManyWithoutFeaturesInInput
  inPlaylist: PlaylistUpdateManyWithoutTracksInput
}

input TrackUpdateWithoutArtistsDataInput {
  discNumber: Int
  duration: Int
  explicit: Boolean
  genre: String
  isPlayable: Boolean
  name: String
  trackNumber: Int
  album: AlbumUpdateOneRequiredWithoutTracksInput
  featuring: ArtistUpdateManyWithoutFeaturesInInput
  inPlaylist: PlaylistUpdateManyWithoutTracksInput
}

input TrackUpdateWithoutFeaturingDataInput {
  discNumber: Int
  duration: Int
  explicit: Boolean
  genre: String
  isPlayable: Boolean
  name: String
  trackNumber: Int
  album: AlbumUpdateOneRequiredWithoutTracksInput
  artists: ArtistUpdateManyWithoutTracksInput
  inPlaylist: PlaylistUpdateManyWithoutTracksInput
}

input TrackUpdateWithoutInPlaylistDataInput {
  discNumber: Int
  duration: Int
  explicit: Boolean
  genre: String
  isPlayable: Boolean
  name: String
  trackNumber: Int
  album: AlbumUpdateOneRequiredWithoutTracksInput
  artists: ArtistUpdateManyWithoutTracksInput
  featuring: ArtistUpdateManyWithoutFeaturesInInput
}

input TrackUpdateWithWhereUniqueWithoutAlbumInput {
  where: TrackWhereUniqueInput!
  data: TrackUpdateWithoutAlbumDataInput!
}

input TrackUpdateWithWhereUniqueWithoutArtistsInput {
  where: TrackWhereUniqueInput!
  data: TrackUpdateWithoutArtistsDataInput!
}

input TrackUpdateWithWhereUniqueWithoutFeaturingInput {
  where: TrackWhereUniqueInput!
  data: TrackUpdateWithoutFeaturingDataInput!
}

input TrackUpdateWithWhereUniqueWithoutInPlaylistInput {
  where: TrackWhereUniqueInput!
  data: TrackUpdateWithoutInPlaylistDataInput!
}

input TrackUpsertWithWhereUniqueWithoutAlbumInput {
  where: TrackWhereUniqueInput!
  update: TrackUpdateWithoutAlbumDataInput!
  create: TrackCreateWithoutAlbumInput!
}

input TrackUpsertWithWhereUniqueWithoutArtistsInput {
  where: TrackWhereUniqueInput!
  update: TrackUpdateWithoutArtistsDataInput!
  create: TrackCreateWithoutArtistsInput!
}

input TrackUpsertWithWhereUniqueWithoutFeaturingInput {
  where: TrackWhereUniqueInput!
  update: TrackUpdateWithoutFeaturingDataInput!
  create: TrackCreateWithoutFeaturingInput!
}

input TrackUpsertWithWhereUniqueWithoutInPlaylistInput {
  where: TrackWhereUniqueInput!
  update: TrackUpdateWithoutInPlaylistDataInput!
  create: TrackCreateWithoutInPlaylistInput!
}

input TrackWhereInput {
  """Logical AND on all given filters."""
  AND: [TrackWhereInput!]

  """Logical OR on all given filters."""
  OR: [TrackWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TrackWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  discNumber: Int

  """All values that are not equal to given value."""
  discNumber_not: Int

  """All values that are contained in given list."""
  discNumber_in: [Int!]

  """All values that are not contained in given list."""
  discNumber_not_in: [Int!]

  """All values less than the given value."""
  discNumber_lt: Int

  """All values less than or equal the given value."""
  discNumber_lte: Int

  """All values greater than the given value."""
  discNumber_gt: Int

  """All values greater than or equal the given value."""
  discNumber_gte: Int
  duration: Int

  """All values that are not equal to given value."""
  duration_not: Int

  """All values that are contained in given list."""
  duration_in: [Int!]

  """All values that are not contained in given list."""
  duration_not_in: [Int!]

  """All values less than the given value."""
  duration_lt: Int

  """All values less than or equal the given value."""
  duration_lte: Int

  """All values greater than the given value."""
  duration_gt: Int

  """All values greater than or equal the given value."""
  duration_gte: Int
  explicit: Boolean

  """All values that are not equal to given value."""
  explicit_not: Boolean
  genre: String

  """All values that are not equal to given value."""
  genre_not: String

  """All values that are contained in given list."""
  genre_in: [String!]

  """All values that are not contained in given list."""
  genre_not_in: [String!]

  """All values less than the given value."""
  genre_lt: String

  """All values less than or equal the given value."""
  genre_lte: String

  """All values greater than the given value."""
  genre_gt: String

  """All values greater than or equal the given value."""
  genre_gte: String

  """All values containing the given string."""
  genre_contains: String

  """All values not containing the given string."""
  genre_not_contains: String

  """All values starting with the given string."""
  genre_starts_with: String

  """All values not starting with the given string."""
  genre_not_starts_with: String

  """All values ending with the given string."""
  genre_ends_with: String

  """All values not ending with the given string."""
  genre_not_ends_with: String
  isPlayable: Boolean

  """All values that are not equal to given value."""
  isPlayable_not: Boolean
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  trackNumber: Int

  """All values that are not equal to given value."""
  trackNumber_not: Int

  """All values that are contained in given list."""
  trackNumber_in: [Int!]

  """All values that are not contained in given list."""
  trackNumber_not_in: [Int!]

  """All values less than the given value."""
  trackNumber_lt: Int

  """All values less than or equal the given value."""
  trackNumber_lte: Int

  """All values greater than the given value."""
  trackNumber_gt: Int

  """All values greater than or equal the given value."""
  trackNumber_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  album: AlbumWhereInput
  artists_every: ArtistWhereInput
  artists_some: ArtistWhereInput
  artists_none: ArtistWhereInput
  featuring_every: ArtistWhereInput
  featuring_some: ArtistWhereInput
  featuring_none: ArtistWhereInput
  inPlaylist_every: PlaylistWhereInput
  inPlaylist_some: PlaylistWhereInput
  inPlaylist_none: PlaylistWhereInput
}

input TrackWhereUniqueInput {
  id: ID
}

type User implements Node {
  id: ID!
  isAdmin: Boolean!
  name: String!
  playlists(where: PlaylistWhereInput, orderBy: PlaylistOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Playlist!]
  username: String!
  verified: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  isAdmin: Boolean
  name: String!
  username: String!
  verified: Boolean
  playlists: PlaylistCreateManyWithoutCreatorInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPlaylistsInput {
  create: UserCreateWithoutPlaylistsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutPlaylistsInput {
  isAdmin: Boolean
  name: String!
  username: String!
  verified: Boolean
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  isAdmin_ASC
  isAdmin_DESC
  name_ASC
  name_DESC
  username_ASC
  username_DESC
  verified_ASC
  verified_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  isAdmin: Boolean!
  name: String!
  username: String!
  verified: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  isAdmin: Boolean
  name: String
  username: String
  verified: Boolean
  playlists: PlaylistUpdateManyWithoutCreatorInput
}

input UserUpdateInput {
  isAdmin: Boolean
  name: String
  username: String
  verified: Boolean
  playlists: PlaylistUpdateManyWithoutCreatorInput
}

input UserUpdateManyMutationInput {
  isAdmin: Boolean
  name: String
  username: String
  verified: Boolean
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneRequiredWithoutPlaylistsInput {
  create: UserCreateWithoutPlaylistsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutPlaylistsDataInput
  upsert: UserUpsertWithoutPlaylistsInput
}

input UserUpdateWithoutPlaylistsDataInput {
  isAdmin: Boolean
  name: String
  username: String
  verified: Boolean
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutPlaylistsInput {
  update: UserUpdateWithoutPlaylistsDataInput!
  create: UserCreateWithoutPlaylistsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  isAdmin: Boolean

  """All values that are not equal to given value."""
  isAdmin_not: Boolean
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  username: String

  """All values that are not equal to given value."""
  username_not: String

  """All values that are contained in given list."""
  username_in: [String!]

  """All values that are not contained in given list."""
  username_not_in: [String!]

  """All values less than the given value."""
  username_lt: String

  """All values less than or equal the given value."""
  username_lte: String

  """All values greater than the given value."""
  username_gt: String

  """All values greater than or equal the given value."""
  username_gte: String

  """All values containing the given string."""
  username_contains: String

  """All values not containing the given string."""
  username_not_contains: String

  """All values starting with the given string."""
  username_starts_with: String

  """All values not starting with the given string."""
  username_not_starts_with: String

  """All values ending with the given string."""
  username_ends_with: String

  """All values not ending with the given string."""
  username_not_ends_with: String
  verified: Boolean

  """All values that are not equal to given value."""
  verified_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  playlists_every: PlaylistWhereInput
  playlists_some: PlaylistWhereInput
  playlists_none: PlaylistWhereInput
}

input UserWhereUniqueInput {
  id: ID
  username: String
}
